// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: account.sql

package db

import (
	"context"
	"database/sql"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO account_mgt.accounts (
  owner_id, 
  balance,
  account_no,
  currency
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, owner_id, balance, account_no, currency, created_at
`

type CreateAccountParams struct {
	OwnerID   int64         `json:"owner_id"`
	Balance   sql.NullInt64 `json:"balance"`
	AccountNo string        `json:"account_no"`
	Currency  string        `json:"currency"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (AccountMgtAccount, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.OwnerID,
		arg.Balance,
		arg.AccountNo,
		arg.Currency,
	)
	var i AccountMgtAccount
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Balance,
		&i.AccountNo,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM account_mgt.accounts WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, owner_id, balance, account_no, currency, created_at FROM account_mgt.accounts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (AccountMgtAccount, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i AccountMgtAccount
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Balance,
		&i.AccountNo,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, owner_id, balance, account_no, currency, created_at FROM account_mgt.accounts
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAccountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]AccountMgtAccount, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountMgtAccount
	for rows.Next() {
		var i AccountMgtAccount
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Balance,
			&i.AccountNo,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE account_mgt.accounts 
SET 
balance = $2
WHERE id = $1
RETURNING id, owner_id, balance, account_no, currency, created_at
`

type UpdateAccountParams struct {
	ID      int64         `json:"id"`
	Balance sql.NullInt64 `json:"balance"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (AccountMgtAccount, error) {
	row := q.db.QueryRowContext(ctx, updateAccount, arg.ID, arg.Balance)
	var i AccountMgtAccount
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Balance,
		&i.AccountNo,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}
