// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO user_mgt.users (
  full_name, 
  id_card_no
) VALUES (
  $1, $2
)
RETURNING id, full_name, id_card_no, created_at
`

type CreateUserParams struct {
	FullName string         `json:"full_name"`
	IDCardNo sql.NullString `json:"id_card_no"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (UserMgtUser, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.FullName, arg.IDCardNo)
	var i UserMgtUser
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.IDCardNo,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM user_mgt.users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, full_name, id_card_no, created_at FROM user_mgt.users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (UserMgtUser, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i UserMgtUser
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.IDCardNo,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, full_name, id_card_no, created_at FROM user_mgt.users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]UserMgtUser, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserMgtUser
	for rows.Next() {
		var i UserMgtUser
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.IDCardNo,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE user_mgt.users 
SET 
full_name = $2,
id_card_no = $3
WHERE id = $1
RETURNING id, full_name, id_card_no, created_at
`

type UpdateUserParams struct {
	ID       int64          `json:"id"`
	FullName string         `json:"full_name"`
	IDCardNo sql.NullString `json:"id_card_no"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UserMgtUser, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.ID, arg.FullName, arg.IDCardNo)
	var i UserMgtUser
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.IDCardNo,
		&i.CreatedAt,
	)
	return i, err
}
